{"ast":null,"code":"var _jsxFileName = \"/home/chau1246/Documents/pizza/src/App/components/cart/PopupForm.js\";\nimport React from 'react';\nimport Alert from '../sharecomponents/Alert';\nimport { useFormik } from 'formik';\nimport { checkout } from '../../redux/cart/CartSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CheckoutForm } from './StyledCart';\nconst initialValues = {\n  address: ''\n};\n\nconst getAuthenticated = state => {\n  return state.auth.authenticated;\n};\n\nconst getMsg = state => {\n  return state.cart.msg;\n};\n\nconst PopupForm = () => {\n  const message = useSelector(getMsg);\n  const isAuthenticated = useSelector(getAuthenticated);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true);\n\n      try {\n        await dispatch(checkout({\n          values\n        }));\n      } catch (error) {}\n\n      setSubmitting(false);\n    },\n    validate: values => {\n      const errors = {};\n      const {\n        address\n      } = values;\n\n      if (!address) {\n        errors.address = 'Required';\n      }\n\n      return errors;\n    }\n  });\n  const {\n    errors,\n    values,\n    handleChange,\n    handleSubmit,\n    isSubmitting\n  } = formik;\n  const {\n    address\n  } = values;\n  return /*#__PURE__*/React.createElement(CheckoutForm, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"Address for shipping\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"address\",\n    name: \"address\",\n    onChange: handleChange,\n    value: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), errors.address ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 35\n    }\n  }, errors.address) : null, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"Check out\")));\n};\n\nexport default React.memo(PopupForm);","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/components/cart/PopupForm.js"],"names":["React","Alert","useFormik","checkout","useSelector","useDispatch","CheckoutForm","initialValues","address","getAuthenticated","state","auth","authenticated","getMsg","cart","msg","PopupForm","message","isAuthenticated","dispatch","formik","onSubmit","values","setSubmitting","resetForm","error","validate","errors","handleChange","handleSubmit","isSubmitting","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE;AADS,CAAtB;;AAIA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,IAAN,CAAWC,aAAlB;AACH,CAFD;;AAIA,MAAMC,MAAM,GAAIH,KAAD,IAAW;AACtB,SAAOA,KAAK,CAACI,IAAN,CAAWC,GAAlB;AACH,CAFD;;AAIA,MAAMC,SAAS,GAAG,MAAM;AAEpB,QAAMC,OAAO,GAAGb,WAAW,CAACS,MAAD,CAA3B;AAEA,QAAMK,eAAe,GAAGd,WAAW,CAACK,gBAAD,CAAnC;AAEA,QAAMU,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,MAAM,GAAGlB,SAAS,CAAC;AACrBK,IAAAA,aADqB;AAErBc,IAAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAf,KAAgD;AAEtDD,MAAAA,aAAa,CAAC,IAAD,CAAb;;AACA,UAAI;AACA,cAAMJ,QAAQ,CAAChB,QAAQ,CAAC;AAAEmB,UAAAA;AAAF,SAAD,CAAT,CAAd;AACH,OAFD,CAGA,OAAOG,KAAP,EAAc,CAEb;;AACDF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAZoB;AAarBG,IAAAA,QAAQ,EAAGJ,MAAD,IAAY;AAClB,YAAMK,MAAM,GAAG,EAAf;AACA,YAAM;AAAEnB,QAAAA;AAAF,UAAcc,MAApB;;AAEA,UAAI,CAACd,OAAL,EAAc;AACVmB,QAAAA,MAAM,CAACnB,OAAP,GAAiB,UAAjB;AACH;;AACD,aAAOmB,MAAP;AAEH;AAtBoB,GAAD,CAAxB;AAwBA,QAAM;AAAEA,IAAAA,MAAF;AAAUL,IAAAA,MAAV;AAAkBM,IAAAA,YAAlB;AAAgCC,IAAAA,YAAhC;AAA8CC,IAAAA;AAA9C,MAA+DV,MAArE;AACA,QAAM;AAAEZ,IAAAA;AAAF,MAAcc,MAApB;AAEA,sBACI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEO,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAM,IAAA,MAAM,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,eAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,SAAtB;AAAgC,IAAA,IAAI,EAAC,SAArC;AAA+C,IAAA,QAAQ,EAAED,YAAzD;AAAuE,IAAA,KAAK,EAAEpB,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKmB,MAAM,CAACnB,OAAP,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMmB,MAAM,CAACnB,OAAb,CAAjB,GAA+C,IAHpD,eAII;AAAQ,IAAA,QAAQ,EAAEsB,YAAlB;AAAgC,IAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,CAFJ,CADJ;AAWH,CA9CD;;AAgDA,eAAe9B,KAAK,CAAC+B,IAAN,CAAWf,SAAX,CAAf","sourcesContent":["import React from 'react';\nimport Alert from '../sharecomponents/Alert';\nimport { useFormik } from 'formik';\nimport { checkout } from '../../redux/cart/CartSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CheckoutForm } from './StyledCart'\n\nconst initialValues = {\n    address: '',\n};\n\nconst getAuthenticated = (state) => {\n    return state.auth.authenticated;\n};\n\nconst getMsg = (state) => {\n    return state.cart.msg\n};\n\nconst PopupForm = () => {\n\n    const message = useSelector(getMsg);\n\n    const isAuthenticated = useSelector(getAuthenticated);\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\n\n            setSubmitting(true);\n            try {\n                await dispatch(checkout({ values }));\n            }\n            catch (error) {\n\n            }\n            setSubmitting(false);\n        },\n        validate: (values) => {\n            const errors = {};\n            const { address } = values;\n\n            if (!address) {\n                errors.address = 'Required';\n            }\n            return errors;\n\n        }\n    });\n    const { errors, values, handleChange, handleSubmit, isSubmitting } = formik;\n    const { address } = values;\n\n    return (\n        <CheckoutForm onSubmit={handleSubmit}>\n            {/* <Alert /> */}\n            <form action=\"#\">\n                <label htmlFor=\"address\">Address for shipping</label>\n                <input type=\"text\" id=\"address\" name=\"address\" onChange={handleChange} value={address} />\n                {errors.address ? <div>{errors.address}</div> : null}\n                <button disabled={isSubmitting} type=\"submit\">Check out</button>\n            </form>\n        </CheckoutForm>\n    )\n}\n\nexport default React.memo(PopupForm);"]},"metadata":{},"sourceType":"module"}