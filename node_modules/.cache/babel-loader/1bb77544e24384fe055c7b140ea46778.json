{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nexport const checkout = createAsyncThunk('auth/checkoutStatus', async (info, {\n  getState,\n  requestId\n}) => {\n  const {\n    currentRequestId,\n    requesting\n  } = getState().cart;\n  const {\n    token\n  } = getState().user;\n  console.log(token);\n\n  if (requesting === false || requestId !== currentRequestId) {\n    return;\n  }\n\n  const data = await UserServices.checkout(info);\n  return { ...data\n  };\n});\nconst initialState = {\n  requesting: false,\n  isExist: {},\n  products: {},\n  total: 0,\n  items: 0\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        product\n      } = action.payload;\n      const {\n        photo,\n        name,\n        description,\n        price,\n        _id\n      } = product;\n      let quantity;\n      const isNewProduct = state.isExist[_id];\n\n      if (!isNewProduct) {\n        state.isExist[_id] = true;\n        quantity = 1;\n      } else {\n        quantity = state.products[_id].quantity;\n        quantity += 1;\n      }\n\n      state.total += price;\n      state.items += 1;\n      state.products[_id] = {\n        photo,\n        name,\n        description,\n        price,\n        quantity\n      };\n    },\n    add: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      state.total += state.products[_id].price;\n      state.items += 1;\n      state.products[_id].quantity += 1;\n    },\n    reduce: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      let quantity = state.products[_id].quantity;\n      state.total -= state.products[_id].price;\n      state.items -= 1;\n\n      if (quantity === 1) {\n        state.isExist[_id] = false;\n        delete state.products[_id];\n      } else {\n        state.products[_id].quantity -= 1;\n      }\n    }\n  },\n  extraReducers: {\n    [checkout.pending]: (state, action) => {},\n    [checkout.fulfilled]: (state, action) => {},\n    [checkout.rejected]: (state, action) => {}\n  }\n});\nconst {\n  actions,\n  reducer\n} = cartSlice;\nexport const {\n  addToCart,\n  add,\n  reduce\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/cart/CartSlice.js"],"names":["createSlice","createAsyncThunk","UserServices","checkout","info","getState","requestId","currentRequestId","requesting","cart","token","user","console","log","data","initialState","isExist","products","total","items","cartSlice","name","reducers","addToCart","state","action","product","payload","photo","description","price","_id","quantity","isNewProduct","add","reduce","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\n\nexport const checkout = createAsyncThunk(\n    'auth/checkoutStatus',\n    async (info, { getState, requestId }) => {\n        const { currentRequestId, requesting } = getState().cart;\n        const { token } = getState().user;\n        console.log(token);\n        if (requesting === false || requestId !== currentRequestId) {\n            return\n        }\n        const data = await UserServices.checkout(info);\n        return { ...data };\n    }\n)\n\nconst initialState = {\n    requesting: false,\n    isExist: {},\n    products: {},\n    total: 0,\n    items: 0\n}\n\nexport const cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        addToCart: (state, action) => {\n            const { product } = action.payload;\n            const { photo, name, description, price, _id } = product;\n            let quantity;\n            const isNewProduct = state.isExist[_id];\n\n            if (!isNewProduct) {\n                state.isExist[_id] = true;\n                quantity = 1;\n            }\n            else {\n                quantity = state.products[_id].quantity;\n                quantity += 1;\n            }\n            state.total += price;\n            state.items += 1;\n            state.products[_id] = { photo, name, description, price, quantity };\n        },\n        add: (state, action) => {\n\n            const { _id } = action.payload;\n            state.total += state.products[_id].price;\n            state.items += 1;\n            state.products[_id].quantity += 1;\n        },\n        reduce: (state, action) => {\n            const { _id } = action.payload;\n            let quantity = state.products[_id].quantity;\n            state.total -= state.products[_id].price;\n            state.items -= 1;\n\n            if (quantity === 1) {\n\n                state.isExist[_id] = false;\n                delete state.products[_id];\n            }\n            else {\n\n                state.products[_id].quantity -= 1;\n            }\n\n\n        }\n    },\n    extraReducers: {\n        [checkout.pending]: (state, action) => {\n\n        },\n        [checkout.fulfilled]: (state, action) => {\n\n        },\n        [checkout.rejected]: (state, action) => {\n\n        }\n    }\n});\n\n\nconst { actions, reducer } = cartSlice;\n\nexport const { addToCart, add, reduce } = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}