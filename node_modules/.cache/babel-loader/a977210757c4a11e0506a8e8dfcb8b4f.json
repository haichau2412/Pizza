{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    isExist: {},\n    products: {},\n    total: 0,\n    items: 0\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        product\n      } = action.payload;\n      const {\n        photo,\n        name,\n        description,\n        price,\n        _id\n      } = product;\n      let quantity;\n      const isNewProduct = state.isExist[_id];\n\n      if (!isNewProduct) {\n        state.isExist[_id] = true;\n        quantity = 1;\n      } else {\n        quantity = state.products[_id].quantity;\n        quantity += 1;\n      }\n\n      state.total += price;\n      state.items += 1;\n      state.products[_id] = {\n        photo,\n        name,\n        description,\n        price,\n        quantity\n      };\n    },\n    add: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      state.total += state.products[_id].price;\n      state.items += 1;\n      state.products[_id].quantity += 1;\n    },\n    reduce: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      let quantity = state.products[_id].quantity;\n      state.total -= state.products[_id].price;\n      state.items -= 1;\n\n      if (quantity === 1) {\n        state.isExist[_id] = false;\n        delete state.products[_id];\n      } else {\n        state.products[_id].quantity -= 1;\n      }\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = cartSlice;\nexport const {\n  addToCart,\n  add,\n  reduce\n} = actions;\nexport default reducer;\nconsole.log(cartSlice);","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/cart/CartSlice.js"],"names":["createSlice","cartSlice","name","initialState","isExist","products","total","items","reducers","addToCart","state","action","product","payload","photo","description","price","_id","quantity","isNewProduct","add","reduce","actions","reducer","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACjCE,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EACZ;AACIC,IAAAA,OAAO,EAAE,EADb;AAEIC,IAAAA,QAAQ,EAAE,EAFd;AAGIC,IAAAA,KAAK,EAAE,CAHX;AAIIC,IAAAA,KAAK,EAAE;AAJX,GAHiC;AASjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAM;AAAEC,QAAAA;AAAF,UAAcD,MAAM,CAACE,OAA3B;AACA,YAAM;AAAEC,QAAAA,KAAF;AAASZ,QAAAA,IAAT;AAAea,QAAAA,WAAf;AAA4BC,QAAAA,KAA5B;AAAmCC,QAAAA;AAAnC,UAA2CL,OAAjD;AACA,UAAIM,QAAJ;AACA,YAAMC,YAAY,GAAGT,KAAK,CAACN,OAAN,CAAca,GAAd,CAArB;;AAEA,UAAI,CAACE,YAAL,EAAmB;AACfT,QAAAA,KAAK,CAACN,OAAN,CAAca,GAAd,IAAqB,IAArB;AACAC,QAAAA,QAAQ,GAAG,CAAX;AACH,OAHD,MAIK;AACDA,QAAAA,QAAQ,GAAGR,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBC,QAA/B;AACAA,QAAAA,QAAQ,IAAI,CAAZ;AACH;;AACDR,MAAAA,KAAK,CAACJ,KAAN,IAAeU,KAAf;AACAN,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACAG,MAAAA,KAAK,CAACL,QAAN,CAAeY,GAAf,IAAsB;AAAEH,QAAAA,KAAF;AAASZ,QAAAA,IAAT;AAAea,QAAAA,WAAf;AAA4BC,QAAAA,KAA5B;AAAmCE,QAAAA;AAAnC,OAAtB;AACH,KAlBK;AAmBNE,IAAAA,GAAG,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAEpB,YAAM;AAAEM,QAAAA;AAAF,UAAUN,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAACJ,KAAN,IAAeI,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBD,KAAnC;AACAN,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACAG,MAAAA,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBC,QAApB,IAAgC,CAAhC;AACH,KAzBK;AA0BNG,IAAAA,MAAM,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AACvB,YAAM;AAAEM,QAAAA;AAAF,UAAUN,MAAM,CAACE,OAAvB;AACA,UAAIK,QAAQ,GAAGR,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBC,QAAnC;AACAR,MAAAA,KAAK,CAACJ,KAAN,IAAeI,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBD,KAAnC;AACAN,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;;AAEA,UAAIW,QAAQ,KAAK,CAAjB,EAAoB;AAEhBR,QAAAA,KAAK,CAACN,OAAN,CAAca,GAAd,IAAqB,KAArB;AACA,eAAOP,KAAK,CAACL,QAAN,CAAeY,GAAf,CAAP;AACH,OAJD,MAKK;AAEDP,QAAAA,KAAK,CAACL,QAAN,CAAeY,GAAf,EAAoBC,QAApB,IAAgC,CAAhC;AACH;AAGJ;AA3CK;AATuB,CAAD,CAA7B;AAyDP,MAAM;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBtB,SAA7B;AAEA,OAAO,MAAM;AAAEQ,EAAAA,SAAF;AAAaW,EAAAA,GAAb;AAAkBC,EAAAA;AAAlB,IAA6BC,OAAnC;AAEP,eAAeC,OAAf;AAEAC,OAAO,CAACC,GAAR,CAAYxB,SAAZ","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const cartSlice = createSlice({\n    name: 'cart',\n    initialState:\n    {\n        isExist: {},\n        products: {},\n        total: 0,\n        items: 0\n    },\n    reducers: {\n        addToCart: (state, action) => {\n            const { product } = action.payload;\n            const { photo, name, description, price, _id } = product;\n            let quantity;\n            const isNewProduct = state.isExist[_id];\n\n            if (!isNewProduct) {\n                state.isExist[_id] = true;\n                quantity = 1;\n            }\n            else {\n                quantity = state.products[_id].quantity;\n                quantity += 1;\n            }\n            state.total += price;\n            state.items += 1;\n            state.products[_id] = { photo, name, description, price, quantity };\n        },\n        add: (state, action) => {\n\n            const { _id } = action.payload;\n            state.total += state.products[_id].price;\n            state.items += 1;\n            state.products[_id].quantity += 1;\n        },\n        reduce: (state, action) => {\n            const { _id } = action.payload;\n            let quantity = state.products[_id].quantity;\n            state.total -= state.products[_id].price;\n            state.items -= 1;\n\n            if (quantity === 1) {\n\n                state.isExist[_id] = false;\n                delete state.products[_id];\n            }\n            else {\n\n                state.products[_id].quantity -= 1;\n            }\n\n\n        }\n    },\n});\n\n\nconst { actions, reducer } = cartSlice;\n\nexport const { addToCart, add, reduce } = actions;\n\nexport default reducer;\n\nconsole.log(cartSlice);"]},"metadata":{},"sourceType":"module"}