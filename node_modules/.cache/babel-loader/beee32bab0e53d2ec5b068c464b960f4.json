{"ast":null,"code":"var _jsxFileName = \"/home/chau1246/Documents/pizza/src/App/components/cart/AddressForm.js\";\nimport React from 'react';\nimport Alert from '../sharecomponents/Alert';\nimport { useFormik } from 'formik';\nimport { checkout, resetMsg } from '../../redux/cart/CartSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CheckoutForm } from './StyledCart';\nconst initialValues = {\n  address: ''\n};\n\nconst getToken = state => {\n  return state.auth.token;\n};\n\nconst getMsg = state => {\n  return state.cart.msg;\n};\n\nconst PopupForm = () => {\n  const message = useSelector(getMsg);\n  const token = useSelector(getToken);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true);\n\n      try {\n        await dispatch(checkout({ ...values,\n          token\n        }));\n      } catch (error) {}\n\n      setSubmitting(false);\n    },\n    validate: values => {\n      const errors = {};\n      const {\n        address\n      } = values;\n\n      if (!address) {\n        errors.address = 'Required';\n      }\n\n      return errors;\n    }\n  });\n  const {\n    errors,\n    values,\n    handleChange,\n    handleSubmit,\n    isSubmitting\n  } = formik;\n  const {\n    address\n  } = values;\n  React.useEffect(() => {\n    return () => {\n      dispatch(resetMsg());\n    };\n  }, [dispatch]);\n  const makeAlert = React.useCallback(() => {\n    if (message) {\n      alert(message);\n    }\n  }, [message]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Alert, {\n    alert: makeAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CheckoutForm, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    action: \"#\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Address for shipping\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    type: \"text\",\n    id: \"address\",\n    name: \"address\",\n    onChange: handleChange,\n    value: address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), errors.address ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 39\n    }\n  }, errors.address) : null, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isSubmitting,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"Check out\"))));\n};\n\nexport default React.memo(PopupForm);","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/components/cart/AddressForm.js"],"names":["React","Alert","useFormik","checkout","resetMsg","useSelector","useDispatch","CheckoutForm","initialValues","address","getToken","state","auth","token","getMsg","cart","msg","PopupForm","message","dispatch","formik","onSubmit","values","setSubmitting","resetForm","error","validate","errors","handleChange","handleSubmit","isSubmitting","useEffect","makeAlert","useCallback","alert","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Alert from '../sharecomponents/Alert';\nimport { useFormik } from 'formik';\nimport { checkout, resetMsg } from '../../redux/cart/CartSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CheckoutForm } from './StyledCart'\n\nconst initialValues = {\n    address: '',\n};\n\nconst getToken = (state) => {\n    return state.auth.token;\n};\n\nconst getMsg = (state) => {\n    return state.cart.msg\n};\n\nconst PopupForm = () => {\n\n    const message = useSelector(getMsg);\n\n    const token = useSelector(getToken);\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues,\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\n\n            setSubmitting(true);\n            try {\n                await dispatch(checkout({ ...values, token }));\n            }\n            catch (error) {\n\n            }\n            setSubmitting(false);\n        },\n        validate: (values) => {\n            const errors = {};\n            const { address } = values;\n\n            if (!address) {\n                errors.address = 'Required';\n            }\n            return errors;\n\n        }\n    });\n    const { errors, values, handleChange, handleSubmit, isSubmitting } = formik;\n    const { address } = values;\n\n    React.useEffect(() => {\n        return () => {\n            dispatch(resetMsg());\n        }\n    }, [dispatch]);\n\n    const makeAlert = React.useCallback(() => {\n        if (message) {\n            alert(message);\n        }\n    }, [message]);\n\n    return (\n        <>\n            <Alert alert={makeAlert} />\n            <CheckoutForm onSubmit={handleSubmit}>\n                <form action=\"#\">\n                    <label htmlFor=\"address\">Address for shipping</label>\n                    <textarea type=\"text\" id=\"address\" name=\"address\" onChange={handleChange} value={address} />\n                    {errors.address ? <div>{errors.address}</div> : null}\n                    <button disabled={isSubmitting} type=\"submit\">Check out</button>\n                </form>\n            </CheckoutForm>\n        </>\n    )\n}\n\nexport default React.memo(PopupForm);"]},"metadata":{},"sourceType":"module"}