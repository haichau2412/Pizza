{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nexport const checkout = createAsyncThunk('cart/checkoutStatus', async (info, {\n  getState,\n  requestId\n}) => {\n  const {\n    currentRequestId,\n    requesting,\n    products\n  } = getState().cart;\n\n  if (requesting === false || requestId !== currentRequestId) {\n    return;\n  }\n\n  const data = await UserServices.checkout({ ...info,\n    cart: products\n  });\n  return { ...data\n  };\n});\nconst initialState = {\n  requesting: false,\n  isExist: {},\n  products: {},\n  total: 0,\n  items: 0,\n  msg: '',\n  currentRequestId: ''\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const {\n        product\n      } = action.payload;\n      const {\n        photo,\n        name,\n        description,\n        price,\n        _id\n      } = product;\n      let quantity;\n      const isNewProduct = state.isExist[_id];\n\n      if (!isNewProduct) {\n        state.isExist[_id] = true;\n        quantity = 1;\n      } else {\n        quantity = state.products[_id].quantity;\n        quantity += 1;\n      }\n\n      state.total += price;\n      state.items += 1;\n      state.products[_id] = {\n        photo,\n        name,\n        description,\n        price,\n        quantity\n      };\n    },\n    add: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      state.total += state.products[_id].price;\n      state.items += 1;\n      state.products[_id].quantity += 1;\n    },\n    reduce: (state, action) => {\n      const {\n        _id\n      } = action.payload;\n      let quantity = state.products[_id].quantity;\n      state.total -= state.products[_id].price;\n      state.items -= 1;\n\n      if (quantity === 1) {\n        state.isExist[_id] = false;\n        delete state.products[_id];\n      } else {\n        state.products[_id].quantity -= 1;\n      }\n    }\n  },\n  extraReducers: {\n    [checkout.pending]: (state, action) => {\n      console.log(action.payload);\n\n      if (state.requesting === false) {\n        state.requesting = true;\n      }\n    },\n    [checkout.fulfilled]: (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      const {\n        msg\n      } = action.payload;\n      console.log(action.payload);\n\n      if (state.requesting === true && state.currentRequestId === requestId) {\n        state.requesting = false;\n        state.currentRequestId = undefined;\n      }\n\n      if (msg) {\n        state.msg = msg;\n        state = initialState;\n      }\n    },\n    [checkout.rejected]: (state, action) => {\n      console.log(action.payload);\n      const {\n        requestId\n      } = action.meta;\n\n      if (state.requesting === true && state.currentRequestId === requestId) {\n        state.requesting = false;\n        state.currentRequestId = undefined;\n        state.msg = '';\n      }\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = cartSlice;\nexport const {\n  addToCart,\n  add,\n  reduce\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/cart/CartSlice.js"],"names":["createSlice","createAsyncThunk","UserServices","checkout","info","getState","requestId","currentRequestId","requesting","products","cart","data","initialState","isExist","total","items","msg","cartSlice","name","reducers","addToCart","state","action","product","payload","photo","description","price","_id","quantity","isNewProduct","add","reduce","extraReducers","pending","console","log","fulfilled","meta","undefined","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\n\nexport const checkout = createAsyncThunk(\n    'cart/checkoutStatus',\n    async (info, { getState, requestId }) => {\n        const { currentRequestId, requesting, products } = getState().cart;\n\n        if (requesting === false || requestId !== currentRequestId) {\n            return\n        }\n        const data = await UserServices.checkout({ ...info, cart: products });\n        return { ...data };\n    }\n)\n\nconst initialState = {\n    requesting: false,\n    isExist: {},\n    products: {},\n    total: 0,\n    items: 0,\n    msg: '',\n    currentRequestId: ''\n}\n\nexport const cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        addToCart: (state, action) => {\n            const { product } = action.payload;\n            const { photo, name, description, price, _id } = product;\n            let quantity;\n            const isNewProduct = state.isExist[_id];\n\n            if (!isNewProduct) {\n                state.isExist[_id] = true;\n                quantity = 1;\n            }\n            else {\n                quantity = state.products[_id].quantity;\n                quantity += 1;\n            }\n            state.total += price;\n            state.items += 1;\n            state.products[_id] = { photo, name, description, price, quantity };\n        },\n        add: (state, action) => {\n\n            const { _id } = action.payload;\n            state.total += state.products[_id].price;\n            state.items += 1;\n            state.products[_id].quantity += 1;\n        },\n        reduce: (state, action) => {\n            const { _id } = action.payload;\n            let quantity = state.products[_id].quantity;\n            state.total -= state.products[_id].price;\n            state.items -= 1;\n\n            if (quantity === 1) {\n\n                state.isExist[_id] = false;\n                delete state.products[_id];\n            }\n            else {\n                state.products[_id].quantity -= 1;\n            }\n\n\n        }\n    },\n    extraReducers: {\n        [checkout.pending]: (state, action) => {\n            console.log(action.payload);\n            if (state.requesting === false) {\n                state.requesting = true;\n            }\n        },\n        [checkout.fulfilled]: (state, action) => {\n            const { requestId } = action.meta;\n            const { msg } = action.payload;\n            console.log(action.payload);\n            if (state.requesting === true && state.currentRequestId === requestId) {\n                state.requesting = false;\n                state.currentRequestId = undefined\n            }\n            if (msg) {\n                state.msg = msg;\n                state = initialState\n            }\n\n        },\n        [checkout.rejected]: (state, action) => {\n            console.log(action.payload);\n            const { requestId } = action.meta;\n            if (state.requesting === true && state.currentRequestId === requestId) {\n                state.requesting = false;\n                state.currentRequestId = undefined;\n                state.msg = '';\n            }\n        }\n    }\n});\n\n\nconst { actions, reducer } = cartSlice;\n\nexport const { addToCart, add, reduce } = actions;\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}