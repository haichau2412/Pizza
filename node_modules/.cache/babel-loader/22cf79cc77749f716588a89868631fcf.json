{"ast":null,"code":"import { configureStore, createReducer } from '@reduxjs/toolkit';\nimport rootReducer from './RootStore';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth', 'cart'],\n  //Things u want to persist\n  blacklist: [] //Things u dont\n\n}; // Middleware: Redux Persist Persisted Reducer\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk]\n});\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};\nconst resetReducer = createReducer(undefined, {\n  logout: (state, action) => {\n    storage.removeItem('persist:root');\n    state = undefined;\n    return persistedReducer(state, action);\n  }\n}); // (state, action) => {\n//     if (action.type === USER_LOGGED_OUT) {\n//         // for all keys defined in your persistConfig(s)\n//         storage.removeItem('persist:root')\n//         // storage.removeItem('persist:otherKey')\n//         state = undefined;\n//     }\n//     return appReducer(state, action);\n// };","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/PersistStore.js"],"names":["configureStore","createReducer","rootReducer","persistStore","persistReducer","storage","thunk","persistConfig","key","whitelist","blacklist","persistedReducer","store","reducer","middleware","persistor","resetReducer","undefined","logout","state","action","removeItem"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,aAAzB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBH,EAAAA,OAFkB;AAGlBI,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,MAAT,CAHO;AAGW;AAC7BC,EAAAA,SAAS,EAAE,EAJO,CAIH;;AAJG,CAAtB,C,CAOA;;AACA,MAAMC,gBAAgB,GAAGP,cAAc,CAACG,aAAD,EAAgBL,WAAhB,CAAvC;AAEA,OAAO,MAAMU,KAAK,GAAGZ,cAAc,CAAC;AAChCa,EAAAA,OAAO,EAAEF,gBADuB;AAEhCG,EAAAA,UAAU,EAAE,CAACR,KAAD;AAFoB,CAAD,CAA5B;AAKP,OAAO,MAAMS,SAAS,GAAGZ,YAAY,CAACS,KAAD,CAA9B;AAEP,eAAe;AACXA,EAAAA,KADW;AAEXG,EAAAA;AAFW,CAAf;AAMA,MAAMC,YAAY,GAAGf,aAAa,CAACgB,SAAD,EAAY;AAC1CC,EAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvBf,IAAAA,OAAO,CAACgB,UAAR,CAAmB,cAAnB;AACAF,IAAAA,KAAK,GAAGF,SAAR;AACA,WAAON,gBAAgB,CAACQ,KAAD,EAAQC,MAAR,CAAvB;AACH;AALyC,CAAZ,CAAlC,C,CAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA","sourcesContent":["import { configureStore, createReducer } from '@reduxjs/toolkit';\nimport rootReducer from './RootStore';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['auth', 'cart'], //Things u want to persist\n    blacklist: [], //Things u dont\n};\n\n// Middleware: Redux Persist Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n    reducer: persistedReducer,\n    middleware: [thunk]\n});\n\nexport const persistor = persistStore(store);\n\nexport default {\n    store,\n    persistor\n};\n\n\nconst resetReducer = createReducer(undefined, {\n    logout: (state, action) => {\n        storage.removeItem('persist:root')\n        state = undefined;\n        return persistedReducer(state, action);\n    }\n})\n\n// (state, action) => {\n//     if (action.type === USER_LOGGED_OUT) {\n//         // for all keys defined in your persistConfig(s)\n//         storage.removeItem('persist:root')\n//         // storage.removeItem('persist:otherKey')\n\n//         state = undefined;\n//     }\n//     return appReducer(state, action);\n\n\n// };\n"]},"metadata":{},"sourceType":"module"}