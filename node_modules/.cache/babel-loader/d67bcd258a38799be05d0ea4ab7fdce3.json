{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nimport { useDispatch } from 'react-redux';\nexport const authUserbySignup = createAsyncThunk('auth/authUserbySignupStatus', async (info, {\n  getState,\n  requestId\n}) => {\n  const {\n    currentRequestId,\n    authenticating\n  } = getState().auth;\n\n  if (authenticating === true || requestId !== currentRequestId) {\n    console.log(111);\n    return;\n  }\n\n  const data = await UserServices.signup(info);\n  return { ...data,\n    username: info.username\n  };\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    currentRequestId: '',\n    currentUser: {\n      username: ''\n    },\n    authenticating: false,\n    authenticated: false,\n    token: '',\n    error: ''\n  },\n  reducers: {},\n  extraReducers: {\n    [authUserbySignup.pending]: (state, action) => {\n      if (state.authenticating === false) {\n        state.authenticating = true;\n        state.currentRequestId = action.meta.requestId;\n      }\n    },\n    [authUserbySignup.fulfilled]: (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n\n      if (state.authenticating === true && state.currentRequestId === requestId) {\n        state.authenticating = false;\n        state.currentRequestId = undefined;\n      }\n\n      console.log(action); // const { msg, username } = action.payload;\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = authSlice;\nexport const {\n  request,\n  success,\n  error\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/auth/AuthSlice.js"],"names":["createSlice","createAsyncThunk","UserServices","useDispatch","authUserbySignup","info","getState","requestId","currentRequestId","authenticating","auth","console","log","data","signup","username","authSlice","name","initialState","currentUser","authenticated","token","error","reducers","extraReducers","pending","state","action","meta","fulfilled","undefined","actions","reducer","request","success"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAGH,gBAAgB,CAC5C,6BAD4C,EAE5C,OAAOI,IAAP,EAAa;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAb,KAAyC;AACrC,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAuCH,QAAQ,GAAGI,IAAxD;;AACA,MAAID,cAAc,KAAK,IAAnB,IAA2BF,SAAS,KAAKC,gBAA7C,EAA+D;AAC3DG,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA;AACH;;AACD,QAAMC,IAAI,GAAG,MAAMX,YAAY,CAACY,MAAb,CAAoBT,IAApB,CAAnB;AAEA,SAAO,EAAE,GAAGQ,IAAL;AAAWE,IAAAA,QAAQ,EAAEV,IAAI,CAACU;AAA1B,GAAP;AACH,CAX2C,CAAzC;AAcP,OAAO,MAAMC,SAAS,GAAGhB,WAAW,CAAC;AACjCiB,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVV,IAAAA,gBAAgB,EAAE,EADR;AAEVW,IAAAA,WAAW,EAAE;AAAEJ,MAAAA,QAAQ,EAAE;AAAZ,KAFH;AAGVN,IAAAA,cAAc,EAAE,KAHN;AAIVW,IAAAA,aAAa,EAAE,KAJL;AAKVC,IAAAA,KAAK,EAAE,EALG;AAMVC,IAAAA,KAAK,EAAE;AANG,GAFmB;AAUjCC,EAAAA,QAAQ,EAAE,EAVuB;AAYjCC,EAAAA,aAAa,EAAE;AACX,KAACpB,gBAAgB,CAACqB,OAAlB,GAA4B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,UAAID,KAAK,CAACjB,cAAN,KAAyB,KAA7B,EAAoC;AAChCiB,QAAAA,KAAK,CAACjB,cAAN,GAAuB,IAAvB;AACAiB,QAAAA,KAAK,CAAClB,gBAAN,GAAyBmB,MAAM,CAACC,IAAP,CAAYrB,SAArC;AACH;AACJ,KANU;AAOX,KAACH,gBAAgB,CAACyB,SAAlB,GAA8B,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC7C,YAAM;AAAEpB,QAAAA;AAAF,UAAgBoB,MAAM,CAACC,IAA7B;;AACA,UAAIF,KAAK,CAACjB,cAAN,KAAyB,IAAzB,IAAiCiB,KAAK,CAAClB,gBAAN,KAA2BD,SAAhE,EAA2E;AACvEmB,QAAAA,KAAK,CAACjB,cAAN,GAAuB,KAAvB;AACAiB,QAAAA,KAAK,CAAClB,gBAAN,GAAyBsB,SAAzB;AACH;;AACDnB,MAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ,EAN6C,CAO7C;AACH;AAfU;AAZkB,CAAD,CAA7B;AAgCP,MAAM;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBhB,SAA7B;AAEA,OAAO,MAAM;AAAEiB,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBZ,EAAAA;AAApB,IAA8BS,OAApC;AAEP,eAAeC,OAAf","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nimport { useDispatch } from 'react-redux';\n\nexport const authUserbySignup = createAsyncThunk(\n    'auth/authUserbySignupStatus',\n    async (info, { getState, requestId }) => {\n        const { currentRequestId, authenticating } = getState().auth;\n        if (authenticating === true || requestId !== currentRequestId) {\n            console.log(111);\n            return\n        }\n        const data = await UserServices.signup(info);\n\n        return { ...data, username: info.username };\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState: {\n        currentRequestId: '',\n        currentUser: { username: '' },\n        authenticating: false,\n        authenticated: false,\n        token: '',\n        error: ''\n    },\n    reducers: {\n    },\n    extraReducers: {\n        [authUserbySignup.pending]: (state, action) => {\n            if (state.authenticating === false) {\n                state.authenticating = true;\n                state.currentRequestId = action.meta.requestId;\n            }\n        },\n        [authUserbySignup.fulfilled]: (state, action) => {\n            const { requestId } = action.meta\n            if (state.authenticating === true && state.currentRequestId === requestId) {\n                state.authenticating = false\n                state.currentRequestId = undefined\n            }\n            console.log(action);\n            // const { msg, username } = action.payload;\n        },\n    }\n});\n\n\nconst { actions, reducer } = authSlice;\n\nexport const { request, success, error } = actions;\n\nexport default reducer;\n\n"]},"metadata":{},"sourceType":"module"}