{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nimport { useDispatch } from 'react-redux';\nexport const authUserbySignup = createAsyncThunk('auth/authUserbySignupStatus', async (info, {\n  getState,\n  requestId\n}) => {\n  const {\n    currentRequestId,\n    authenticating\n  } = getState().auth;\n\n  if (authenticating === true || requestId !== currentRequestId) {\n    return;\n  }\n\n  const data = await UserServices.signup(info);\n  console.log(data);\n  return { ...data,\n    username: info.username\n  };\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    currentRequestId: '',\n    currentUser: {\n      username: ''\n    },\n    authenticating: false,\n    authenticated: false,\n    token: '',\n    error: ''\n  },\n  reducers: {\n    request: (state, action) => {\n      state.authenticating = true;\n    },\n    success: (state, action) => {\n      state.currentUser = action.payload.username;\n      state.authenticated = true;\n      state.authenticating = false;\n      state.token = action.payload.tooken;\n    },\n    error: (state, action) => {\n      state.authenticating = false;\n      state.error = action.payload.error;\n    }\n  },\n  extraReducers: {\n    [authUserbySignup.pending]: (state, action) => {\n      console.log(actiaction.meta.requestIdon);\n\n      if (state.authenticating === false) {\n        state.authenticating = true;\n        state.currentRequestId = action.meta.requestId;\n      }\n    },\n    [authUserbySignup.fulfilled]: (state, action) => {\n      const {\n        msg,\n        username\n      } = action.payload;\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = authSlice;\nexport const {\n  request,\n  success,\n  error\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/home/chau1246/Documents/pizza/src/App/redux/auth/AuthSlice.js"],"names":["createSlice","createAsyncThunk","UserServices","useDispatch","authUserbySignup","info","getState","requestId","currentRequestId","authenticating","auth","data","signup","console","log","username","authSlice","name","initialState","currentUser","authenticated","token","error","reducers","request","state","action","success","payload","tooken","extraReducers","pending","actiaction","meta","requestIdon","fulfilled","msg","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport UserServices from '../../service/UserServices';\nimport { useDispatch } from 'react-redux';\n\nexport const authUserbySignup = createAsyncThunk(\n    'auth/authUserbySignupStatus',\n    async (info, { getState, requestId }) => {\n        const { currentRequestId, authenticating } = getState().auth;\n        if (authenticating === true || requestId !== currentRequestId) {\n            return\n        }\n        const data = await UserServices.signup(info);\n        console.log(data)\n        return { ...data, username: info.username };\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState: {\n        currentRequestId: '',\n        currentUser: { username: '' },\n        authenticating: false,\n        authenticated: false,\n        token: '',\n        error: ''\n    },\n    reducers: {\n        request: (state, action) => {\n            state.authenticating = true;\n        },\n        success: (state, action) => {\n            state.currentUser = action.payload.username;\n            state.authenticated = true;\n            state.authenticating = false;\n            state.token = action.payload.tooken;\n        },\n        error: (state, action) => {\n            state.authenticating = false;\n            state.error = action.payload.error;\n        }\n    },\n    extraReducers: {\n        [authUserbySignup.pending]: (state, action) => {\n            console.log(actiaction.meta.requestIdon);\n            if (state.authenticating === false) {\n                state.authenticating = true;\n                state.currentRequestId = action.meta.requestId\n            }\n        },\n        [authUserbySignup.fulfilled]: (state, action) => {\n            const { msg, username } = action.payload;\n        },\n    }\n});\n\n\nconst { actions, reducer } = authSlice;\n\nexport const { request, success, error } = actions;\n\nexport default reducer;\n\n"]},"metadata":{},"sourceType":"module"}